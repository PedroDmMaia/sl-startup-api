generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id          String      @id @default(uuid())
  name        String
  cpf         String      @unique
  rg          String      @unique
  email       String      @unique
  phoneNumber String
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("crated_at")
  updatedAt   DateTime?   @updatedAt @map("updated_at")
  password    String
  Bank        Bank[]
  deductions  Deduction[]
  roles       Role[]

  @@map("employee")
}

model Benefit {
  id          String    @id @default(uuid())
  name        String    @unique
  value       Float
  description String?
  conditions  String?
  createdAt   DateTime  @default(now()) @map("crated_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  roles       Role[]    @relation("BenefitRoles")

  @@map("benefit")
}

model Deduction {
  id          String    @id @default(uuid())
  employeeId  String    @map("employee_id")
  reason      String
  date        DateTime  @default(now())
  amount      Float
  description String
  createdAt   DateTime  @default(now()) @map("crated_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("deduction")
}

model Bank {
  id            String    @id @default(uuid())
  employeeId    String    @unique @map("employee_id")
  bankName      String
  agencyNumber  String
  accountNumber String
  createdAt     DateTime  @default(now()) @map("crated_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  employee      Employee  @relation(fields: [employeeId], references: [id])

  @@map("bank")
}

model Role {
  id          String    @id @default(uuid())
  employeeId  String    @map("employee_id")
  name        String
  pay         Float
  description String
  hourlyRate  Int
  weeklyHours Int
  createdAt   DateTime  @default(now()) @map("crated_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  benefits    Benefit[] @relation("BenefitRoles")

  @@map("role")
}
